(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{512:function(t,s,a){"use strict";a.r(s);var n=a(4),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/06/10/Don3ZyJvBCNb6ms.png",alt:"image-20200610092236883"}}),t._v(" "),a("a",{attrs:{name:"y0WRd"}})]),t._v(" "),a("h2",{attrs:{id:"常用的指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用的指令"}},[t._v("#")]),t._v(" 常用的指令")]),t._v(" "),a("p",[a("a",{attrs:{name:"iJvkR"}})]),t._v(" "),a("h3",{attrs:{id:"新增文件的命令："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#新增文件的命令："}},[t._v("#")]),t._v(" 新增文件的命令：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("如果要将单个文件加入到暂存区，可采用如下类似代码：\n$ git add readme.txt\n如果要将多个文件加入到暂存区，可以采用如下类似代码：\n$ git add readme.txt ant.txt\n文件与文件之间用空格分隔；也可以使用通配符方式批量提交文件：\n$ git add *.html\n上面代码可以将所有的html文件提交到暂存区。还有两个杀伤力更强的方式：\n$ git add all \n$ git add .\n两者都可以将工作区中所有未跟踪或者修改的文件添加到暂存区。\n（1）.git add all无论在哪个目录执行都会提交相应文件。\n（2）.git add .只能够提交当前目录或者它后代目录下相应文件。\n文件上传的属性\n$ git add -u：将文件的修改、文件的删除，添加到暂存区。\n$ git add .：将文件的修改，文件的新建，添加到暂存区。\n$ git add -A：将文件的修改，文件的删除，文件的新建，添加到暂存区。\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br")])]),a("p",[a("a",{attrs:{name:"6PsHc"}})]),t._v(" "),a("h3",{attrs:{id:"提交文件的命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#提交文件的命令"}},[t._v("#")]),t._v(" 提交文件的命令")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git commit –m “本次提交描述”\n该命令会将git add .存入暂存区修改内容提交至本地仓库中，若文件未添加至暂存区，则提交时不会提交任何修改。`\n$ git commit –am “本次提交描述” 或 git commit –a –m“本次提交描述”\n该命令会将本地工作区中修改后，还未使用git add . 命令添加到暂存区中的文件也一并提交上去。相当于git add -u 与git commit –m “本次提交描述”两句操作合并为一句进行使用。\n $ git commit --amend  追加提交，它可以在不增加一个新的commit-id的情况下将新修改的代码追加到前一次的commit-id中.\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[a("a",{attrs:{name:"0IgD2"}})]),t._v(" "),a("h3",{attrs:{id:"查看工作区状况"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看工作区状况"}},[t._v("#")]),t._v(" 查看工作区状况")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git status -s 以精简的方式显示文件状态。\n$ git status 输出的命令很详细，但有些繁琐。\n如果用 git status -s 或 git status --short 命令，会得到更为紧凑的格式输出。\n新添加的未跟踪文件前面有 ?? 标记，\n新添加到暂存区中的文件前面有 A 标记，\n修改过的文件前面有 M标记。\nM 有两个可以出现的位置，出现在右边的 M 表示该文件被修改了但是还没放入暂存区，出现在靠左边的 M 表示该文件被修改了并放入了暂存区。\n输出标记会有两列,第一列是对staging区域而言,第二列是对working目录而言。\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[a("a",{attrs:{name:"G0p6Q"}})]),t._v(" "),a("h3",{attrs:{id:"拉取合并远程分支的操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#拉取合并远程分支的操作"}},[t._v("#")]),t._v(" 拉取合并远程分支的操作")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git fetch\n$ git pull\ngit fetch是将远程主机的最新内容拉到本地，用户在检查了以后决定是否合并到工作本机分支中。\ngit pull 则是将远程主机的最新内容拉下来后直接合并，即：git pull = git fetch + git merge\n$ git mergede\ngit-merge命令是用于从指定的commit(s)合并到当前分支的操作\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("查看提交记录命令")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git reflog\n使用git 命令进行操作的日志  \n包括当前步骤所在哪个版本(一个commit 产生一个版本, 指定版本回退只能回退到该commit) 以及操作的具体内容\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[a("a",{attrs:{name:"rNR7V"}})]),t._v(" "),a("h3",{attrs:{id:"参考文章："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考文章："}},[t._v("#")]),t._v(" 参考文章：")]),t._v(" "),a("p",[t._v("Git面试常见问题："),a("a",{attrs:{href:"https://blog.csdn.net/nobody_1/article/details/88956315",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://blog.csdn.net/nobody_1/article/details/88956315"),a("OutboundLink")],1),a("br"),t._v("菜鸟教程："),a("a",{attrs:{href:"https://www.runoob.com/git/git-tutorial.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.runoob.com/git/git-tutorial.html"),a("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=e.exports}}]);